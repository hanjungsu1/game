import pygame
import sys
import random

# 초기화
pygame.init()

# 화면 크기 설정
화면_가로 = 800
화면_세로 = 600
화면 = pygame.display.set_mode((화면_가로, 화면_세로))
pygame.display.set_caption("우주 탐험")

# 폰트 설정
폰트 = pygame.font.SysFont(None, 36)

# 게임 클리어 시간 설정 (초 단위)
게임_클리어_시간 = 60  # 1분
장애물_생성_시간 = 0
장애물_생성_간격 = 0

# 색상 설정
흰색 = (255, 255, 255)
검은색 = (0, 0, 0)
빨간색 = (255, 0, 0)
파란색 = (0, 0, 255)
노란색 = (255, 255, 0)  # 빨강, 녹색, 파랑 값

# 게임 상태
게임_진행중 = True
게임_오버 = False
게임_클리어 = False
게임_시작_시간 = pygame.time.get_ticks()  # 게임 시작 시간

# 목숨 설정
목숨 = 3

# 점수 설정
점수 = 0

# 아이템 종류
아이템_목록 = ["무적", "목숨증가", "속도증가"]
아이템_생성_시간 = 0
아이템_생성_간격 = 0
아이템_가로 = 50
아이템_세로 = 50
아이템_리스트 = []
아이템_속도 = 0.5

# 캐릭터 설정
캐릭터_가로 = 50
캐릭터_세로 = 50
캐릭터_위치 = [화면_가로 / 2, 화면_세로 / 2]
캐릭터_속도 = 1

# 장애물 설정
장애물_가로 = 50
장애물_세로 = 50
장애물_속도 = 0.3  # 장애물의 이동 속도
장애물_리스트 = []

# 총알 설정
총알_가로 = 10
총알_세로 = 10
총알_속도 = 2  # 총알의 이동 속도
총알_리스트 = []
총알_발사_간격 = 500  # 총알을 발사하는 간격 (밀리초 단위)
마지막_총알_발사_시간 = 0  # 초기값은 0으로 설정

def 아이템_충돌_감지():
    for 아이템 in 아이템_리스트[:]:
        if 충돌_감지(캐릭터_위치, 캐릭터_가로, 캐릭터_세로, 아이템['위치'], 아이템_가로, 아이템_세로):
            아이템_리스트.remove(아이템)
            아이템_획득(아이템)

def 아이템_획득(아이템):
    획득_아이템 = random.choice(아이템_목록)
    if 획득_아이템 == "무적":
        # 무적 상태로 설정
        global 무적
        무적 = True
    elif 획득_아이템 == "목숨증가":
        # 목숨 증가
        global 목숨
        목숨 += 1
    elif 획득_아이템 == "속도증가":
        # 속도 증가
        global 캐릭터_속도
        캐릭터_속도 += 1

def 아이템_생성():
    # 아이템의 위치를 랜덤하게 설정
    x = random.randint(0, 화면_가로 - 아이템_가로)
    y = 0
    return {'위치': [x, y]}

# 총알 생성 함수
def 총알_생성(캐릭터_위치):
    x = 캐릭터_위치[0] + 캐릭터_가로 // 2 - 총알_가로 // 2
    y = 캐릭터_위치[1] - 총알_세로  # 캐릭터 위에서 총알이 나오게 설정
    return [x, y]

# 총알 업데이트 함수
def 총알_업데이트():
    for 총알_위치 in 총알_리스트:
        총알_위치[1] -= 총알_속도  # 총알을 위로 이동
        # 화면을 벗어난 총알 제거
        if 총알_위치[1] < 0:
            총알_리스트.remove(총알_위치)

# 충돌 감지 함수 (총알과 장애물 간의 충돌)
def 총알_장애물_충돌_감지():
    for 총알_위치 in 총알_리스트:
        for 장애물_위치 in 장애물_리스트:
            if 충돌_감지(총알_위치, 총알_가로, 총알_세로, 장애물_위치, 장애물_가로, 장애물_세로):
                총알_리스트.remove(총알_위치)
                장애물_리스트.remove(장애물_위치)
                global 점수
                점수 = 점수 + 50  # 점수 50점 추가
                if 점수 % 1000 == 0:  # 1000점 단위로 점수를 획득할 때마다 목숨을 하나씩 늘립니다.
                    global 목숨
                    목숨 += 1
                break

# 총알 클래스
class 총알:
    def __init__(self, 위치, 속도):
        self.위치 = 위치
        self.속도 = 속도

# 장애물 생성 함수
def 장애물_생성():
    x = random.randint(0, 화면_가로 - 장애물_가로)
    y = 0  # 화면 상단에서 시작
    return [x, y]

# 장애물과 총알의 충돌 감지 함수
def 충돌_감지(객체1_위치, 객체1_가로, 객체1_세로, 객체2_위치, 객체2_가로, 객체2_세로):
    객체1_x, 객체1_y = 객체1_위치
    객체2_x, 객체2_y = 객체2_위치

    if (객체1_x < 객체2_x + 객체2_가로 and 객체1_x + 객체1_가로 > 객체2_x and
            객체1_y < 객체2_y + 객체2_세로 and 객체1_y + 객체1_세로 > 객체2_y):
        return True
    else:
        return False

# 게임 오버 함수
def 게임_다시_시작():
    global 목숨
    # 장애물 위치 초기화
    장애물_위치[0] = random.randint(0, 화면_가로 - 장애물_가로)
    장애물_위치[1] = 0

# 게임 오버 화면 표시 함수
def 게임_오버_화면():
    화면.fill(흰색)
    폰트 = pygame.font.SysFont(None, 48)
    오버_텍스트 = 폰트.render("GAME OVER!", True, 빨간색)
    화면.blit(오버_텍스트, (300, 250))
    폰트 = pygame.font.SysFont(None, 24)
    재시작_텍스트 = 폰트.render("다시 시작하려면 R 키를 누르세요.", True, 검은색)
    화면.blit(재시작_텍스트, (280, 300))
    pygame.display.update()

# 게임 클리어 화면 표시 함수
def 게임_클리어_화면():
    화면.fill(흰색)
    폰트 = pygame.font.SysFont(None, 48)
    클리어_텍스트 = 폰트.render("GAME CLEAR!", True, 검은색)
    화면.blit(클리어_텍스트, (300, 250))
    폰트 = pygame.font.SysFont(None, 24)
    재시작_텍스트 = 폰트.render("다시 시작하려면 R 키를 누르세요.", True, 검은색)
    화면.blit(재시작_텍스트, (300, 300))
    점수_텍스트 = 폰트.render(f'SCORE: {점수}', True, 검은색)
    화면.blit(점수_텍스트, (300, 350))
    pygame.display.update()
    
# 게임 루프
while 게임_진행중:
    현재_시간 = pygame.time.get_ticks()
    경과_시간 = (현재_시간 - 게임_시작_시간) / 1000  # 경과 시간 (초 단위로 변환)
    남은_시간 = 게임_클리어_시간 - 경과_시간  # 게임 클리어까지 남은 시간 계산

    화면.fill(흰색)
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_r and 게임_오버:  # 게임 오버 후 R 키를 누르면 재시작
                캐릭터_위치 = [화면_가로 / 2, 화면_세로 / 2]
                목숨 = 3
                점수 = 0
                게임_시작_시간 = pygame.time.get_ticks()
                장애물_리스트 = []  # 장애물 리스트 초기화
                게임_오버 = False
            if event.key == pygame.K_r and 게임_클리어:  # 게임 클리어 후 R 키를 누르면 재시작
                캐릭터_위치 = [화면_가로 / 2, 화면_세로 / 2]
                목숨 = 3
                점수 = 0
                게임_시작_시간 = pygame.time.get_ticks()
                장애물_리스트 = []  # 장애물 리스트 초기화
                게임_클리어 = False

    키_입력 = pygame.key.get_pressed()
    우주선_이동 = [0, 0]  # 우주선의 새로운 이동량

    if 키_입력[pygame.K_LEFT]:
        캐릭터_위치[0] -= 캐릭터_속도
    if 키_입력[pygame.K_RIGHT]:
        캐릭터_위치[0] += 캐릭터_속도
    if 키_입력[pygame.K_UP]:
        캐릭터_위치[1] -= 캐릭터_속도
    if 키_입력[pygame.K_DOWN]:
        캐릭터_위치[1] += 캐릭터_속도
    if 키_입력[pygame.K_SPACE]:
        if 현재_시간 - 마지막_총알_발사_시간 >= 총알_발사_간격:
            총알_리스트.append(총알_생성(캐릭터_위치))
            마지막_총알_발사_시간 = 현재_시간

    # 캐릭터가 화면 밖으로 나가지 않도록 제한
    캐릭터_위치[0] = max(0, min(화면_가로 - 캐릭터_가로, 캐릭터_위치[0]))
    캐릭터_위치[1] = max(0, min(화면_세로 - 캐릭터_세로, 캐릭터_위치[1]))

    # 총알 업데이트
    총알_업데이트()
    
    # 총알과 장애물 충돌 감지
    총알_장애물_충돌_감지()

    # 장애물 생성 및 업데이트
    if 현재_시간 - 장애물_생성_시간 >= 장애물_생성_간격:
        장애물_생성_시간 = 현재_시간
        장애물_리스트.append(장애물_생성())
        장애물_생성_간격 = random.uniform(0.5, 1.5) * 1000  # 장애물 생성 간격을 0.5초에서 1.5초 사이로 랜덤 설정

    # 총알 그리기
    for 총알 in 총알_리스트:
        pygame.draw.rect(화면, 파란색, (총알[0], 총알[1], 총알_가로, 총알_세로))

    for 장애물_위치 in 장애물_리스트:
        장애물_위치[1] += 장애물_속도

        # 충돌 감지
        if 충돌_감지(캐릭터_위치, 캐릭터_가로, 캐릭터_세로, 장애물_위치, 장애물_가로, 장애물_세로):
            목숨 -= 1
            if 목숨 == 0:
                게임_오버 = True
            else:
                게임_다시_시작()
        
        # 장애물 화면에 그리기
        pygame.draw.rect(화면, 빨간색, (장애물_위치[0], 장애물_위치[1], 장애물_가로, 장애물_세로))

    # 아이템 생성 및 업데이트
    if 현재_시간 - 아이템_생성_시간 >= 아이템_생성_간격:
        아이템_생성_시간 = 현재_시간
        아이템_리스트.append(아이템_생성())
        아이템_생성_간격 = random.uniform(5, 15) * 1000  # 아이템 생성 간격을 5초에서 15초 사이로 랜덤 설정

    # 아이템 그리기
    for 아이템 in 아이템_리스트:
        pygame.draw.rect(화면, 노란색, (아이템['위치'][0], 아이템['위치'][1], 아이템_가로, 아이템_세로))

    # 아이템 위치 업데이트
    아이템['위치'][1] += 아이템_속도

    # 아이템 충돌 감지
    아이템_충돌_감지()

    # 게임 오버 상태에서 게임 오버 화면 표시
    if 게임_오버:
        게임_오버_화면()
        continue  # 게임 오버 화면이 표시되는 동안 게임 루프 멈춤

    # 게임 클리어 조건 확인
    if not 게임_오버 and 경과_시간 >= 60:  # 게임 오버 상태가 아니고 1분(60초)이 경과한 경우
        게임_클리어 = True
        pygame.time.delay(1000)  # 2초 대기

    # 게임 클리어 메시지 표시
    if 게임_클리어:
        게임_클리어_화면()
        continue  # 게임 클리어 메시지가 표시될 동안 게임 루프를 멈추고 대기

    # 캐릭터 화면에 그리기
    pygame.draw.rect(화면, 파란색, (캐릭터_위치[0], 캐릭터_위치[1], 캐릭터_가로, 캐릭터_세로))

    # 화면에 남은 시간 표시
    폰트 = pygame.font.SysFont(None, 24)
    남은_시간_텍스트 = 폰트.render(f'TIME: {int(남은_시간)}S', True, 검은색)
    화면.blit(남은_시간_텍스트, (10, 40))
    
    # 화면에 현재 목숨 수 표시
    목숨_텍스트 = 폰트.render(f'LIFE: {목숨}', True, 검은색)
    화면.blit(목숨_텍스트, (10, 10))

    # 화면에 점수 표시
    점수_텍스트 = 폰트.render(f'SCORE: {점수}', True, 검은색)
    화면.blit(점수_텍스트, (10, 70))

    # 화면 업데이트
    pygame.display.update()